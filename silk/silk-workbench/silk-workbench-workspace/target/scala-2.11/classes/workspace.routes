############################################################################################################################################
# Workspace
############################################################################################################################################

GET           /                                                                 controllers.workspace.WorkspaceController.index
GET           /tree                                                             controllers.workspace.WorkspaceController.tree
GET           /allActivities                                                    controllers.workspace.WorkspaceController.activities

GET           /dialogs/newproject                                               controllers.workspace.WorkspaceController.newProjectDialog()
GET           /dialogs/importproject                                            controllers.workspace.WorkspaceController.importProjectDialog()
GET           /dialogs/removeproject/:project                                   controllers.workspace.WorkspaceController.removeProjectDialog(project: String)
GET           /dialogs/removetask/:project/:task                                controllers.workspace.WorkspaceController.removeTaskDialog(project: String, task: String)
GET           /dialogs/removeresource/:name                                     controllers.workspace.WorkspaceController.removeResourceDialog(name: String, path: String)
GET           /dialogs/importlinkspec/:project                                  controllers.workspace.WorkspaceController.importLinkSpecDialog(project: String)
GET           /dialogs/prefixes/:project                                        controllers.workspace.WorkspaceController.prefixDialog(project: String)
GET           /dialogs/resources/:project                                       controllers.workspace.WorkspaceController.resourcesDialog(project: String)
GET           /dialogs/executeProject/:project                                  controllers.workspace.WorkspaceController.executeProjectDialog(project: String)
GET           /dialogs/cloneProject                                             controllers.workspace.WorkspaceController.cloneProjectDialog(project)
GET           /dialogs/cloneTask                                                controllers.workspace.WorkspaceController.cloneTaskDialog(project, task)
GET           /dialogs/activityConfig/:project/:activity                        controllers.workspace.WorkspaceController.projectActivityConfigDialog(project: String, activity: String)
GET           /dialogs/activityConfig/:project/:task/:activity                  controllers.workspace.WorkspaceController.taskActivityConfigDialog(project: String, task: String, activity: String)
POST          /:project/importExample                                           controllers.workspace.WorkspaceController.importExample(project: String)

############################################################################################################################################
# Datasets
############################################################################################################################################

# Dialogs
GET           /dialogs/newDataset/:project                                      controllers.workspace.DatasetApi.datasetDialog(project: String, task = "", title = "Create Dataset", createDialog: Boolean = true)
GET           /dialogs/editDataset/:project/:task                               controllers.workspace.DatasetApi.datasetDialog(project: String, task: String, title = "Edit Dataset", createDialog: Boolean = false)
GET           /dialogs/editDatasetAutoConfigured/:project/:task/:pluginId       controllers.workspace.DatasetApi.datasetDialogAutoConfigured(project, task, pluginId)

# Tabs
GET           /datasets/:project/:task/dataset                                  controllers.workspace.DatasetApi.dataset(project, task)
GET           /datasets/:project/:task/table                                    controllers.workspace.DatasetApi.table(project, task, maxEntities: Int ?= 20)
GET           /datasets/:project/:task/sparql                                   controllers.workspace.DatasetApi.sparql(project, task, query ?= "")
GET           /datasets/:project/:task/types                                    controllers.workspace.DatasetApi.types(project, task, search)

# API
PUT           /projects/:project/datasets/:name                                 controllers.workspace.DatasetApi.putDataset(project: String, name: String, autoConfigure: Boolean ?= false)
GET           /projects/:project/datasets/:name                                 controllers.workspace.DatasetApi.getDataset(project: String, name: String)
DELETE        /projects/:project/datasets/:name                                 controllers.workspace.DatasetApi.deleteDataset(project: String, name: String)
GET           /projects/:project/datasets/:name/autoConfigured                  controllers.workspace.DatasetApi.getDatasetAutoConfigured(project: String, name: String)
GET           /projects/:project/datasets/:name/types                           controllers.workspace.DatasetApi.getDatasetTypes(project: String, name: String)
GET           /projects/:project/datasets/:name/mappingCoverage                 controllers.workspace.DatasetApi.getMappingCoverage(project: String, name: String)
POST          /projects/:project/datasets/:name/mappingCoverage/values          controllers.workspace.DatasetApi.getMappingValueCoverage(project: String, name: String)

############################################################################################################################################
# CustomTasks
############################################################################################################################################

# Dialogs
GET           /customTasks/newTaskDialog/:project                                controllers.workspace.CustomTasks.taskDialog(project: String, task = "", createDialog: Boolean = true)
GET           /customTasks/editTaskDialog/:project/:task                         controllers.workspace.CustomTasks.taskDialog(project: String, task: String, createDialog: Boolean = false)

# API
GET           /projects/:project/customTasks/:name                               controllers.workspace.CustomTasks.getTask(project: String, name: String)
POST           /projects/:project/customTasks/:name                               controllers.workspace.CustomTasks.pushTask(project: String, name: String, createOnly: Boolean = true)
PUT           /projects/:project/customTasks/:name                               controllers.workspace.CustomTasks.pushTask(project: String, name: String, createOnly: Boolean = false)
DELETE        /projects/:project/customTasks/:name                               controllers.workspace.CustomTasks.deleteTask(project: String, name: String)

############################################################################################################################################
# Workspace API
############################################################################################################################################

# Reload Workspace
POST          /reload                                                           controllers.workspace.WorkspaceApi.reload
POST          /reloadPrefixes                                                   controllers.workspace.WorkspaceApi.reloadPrefixes
POST          /import/:importPlugin                                             controllers.workspace.ProjectMarshalingApi.importWorkspaceViaPlugin(importPlugin: String)
GET           /export/:exportPlugin                                             controllers.workspace.ProjectMarshalingApi.exportWorkspaceViaPlugin(exportPlugin: String)
GET           /marshallingPlugins                                               controllers.workspace.ProjectMarshalingApi.availableMarshallingPlugins()
POST          /searchTasks                                                      controllers.workspace.SearchApi.search()

# Projects
GET           /projects                                                         controllers.workspace.WorkspaceApi.projects
GET           /projects/:project                                                controllers.workspace.WorkspaceApi.getProject(project: String)
PUT           /projects/:project                                                controllers.workspace.WorkspaceApi.newProject(project: String)
DELETE        /projects/:project                                                controllers.workspace.WorkspaceApi.deleteProject(project: String)
POST          /projects/:project/import                                         controllers.workspace.ProjectMarshalingApi.importProject(project: String)
POST          /projects/:project/import/:importPlugin                           controllers.workspace.ProjectMarshalingApi.importProjectViaPlugin(project: String, importPlugin: String)
GET           /projects/:project/export                                         controllers.workspace.ProjectMarshalingApi.exportProject(project: String)
GET           /projects/:project/export/:exportPlugin                           controllers.workspace.ProjectMarshalingApi.exportProjectViaPlugin(project: String, exportPlugin: String)
POST          /projects/:project/importLinkSpec                                 controllers.workspace.WorkspaceApi.importLinkSpec(project: String)
GET           /projects/:project/:task/exportLinkSpec                           controllers.workspace.WorkspaceApi.exportLinkSpec(project: String, task: String)
PUT           /projects/:project/prefixes                                       controllers.workspace.WorkspaceApi.updatePrefixes(project: String)
POST          /projects/:project/execute                                        controllers.workspace.WorkspaceApi.executeProject(project: String)
POST          /projects/:project/clone                                          controllers.workspace.WorkspaceApi.cloneProject(project, newProject)

# Resources
GET           /projects/:project/resources                                      controllers.workspace.WorkspaceApi.getResources(project: String)
GET           /projects/:project/resources/:name                                controllers.workspace.WorkspaceApi.getResource(project: String, name: String)
PUT           /projects/:project/resources/:name                                controllers.workspace.WorkspaceApi.putResource(project: String, name: String)
DELETE        /projects/:project/resources/:name                                controllers.workspace.WorkspaceApi.deleteResource(project: String, name: String)
GET           /projects/:project/resources/:name/metadata                       controllers.workspace.WorkspaceApi.getResourceMetadata(project: String, name: String)

# Tasks
POST          /projects/:project/tasks                                          controllers.workspace.TaskApi.postTask(project: String)
PUT           /projects/:project/tasks/:task                                    controllers.workspace.TaskApi.putTask(project: String, task: String)
PATCH         /projects/:project/tasks/:task                                    controllers.workspace.TaskApi.patchTask(project: String, task: String)
GET           /projects/:project/tasks/:task                                    controllers.workspace.TaskApi.getTask(project: String, task: String)
DELETE        /projects/:project/tasks/:task                                    controllers.workspace.TaskApi.deleteTask(project: String, task: String, removeDependentTasks: Boolean ?= false)
PUT           /projects/:project/tasks/:task/metadata                           controllers.workspace.TaskApi.putTaskMetadata(project: String, task: String)
GET           /projects/:project/tasks/:task/metadata                           controllers.workspace.TaskApi.getTaskMetadata(project: String, task: String)
POST          /projects/:project/tasks/:task/clone                              controllers.workspace.TaskApi.cloneTask(project, task, newTask)
POST          /projects/:project/tasks/:task/copy                               controllers.workspace.TaskApi.copyTask(project: String, task: String)
GET           /projects/:project/tasks/:task/cachesLoaded                       controllers.workspace.TaskApi.cachesLoaded(project: String, task: String)
GET           /projects/:project/tasks/:task/downloadOutput                     controllers.workspace.TaskApi.downloadOutput(project: String, task: String)

# Project Activities
GET           /projects/:project/activities                                     controllers.workspace.ActivityApi.getProjectActivities(project: String)
POST          /projects/:project/activities/:activity/start                     controllers.workspace.ActivityApi.startActivity(project: String, task = "", activity: String, blocking: Boolean = false)
POST          /projects/:project/activities/:activity/startBlocking             controllers.workspace.ActivityApi.startActivity(project: String, task = "", activity: String, blocking: Boolean = true)
POST          /projects/:project/activities/:activity/cancel                    controllers.workspace.ActivityApi.cancelActivity(project: String, task = "", activity: String)
POST          /projects/:project/activities/:activity/restart                   controllers.workspace.ActivityApi.restartActivity(project: String, task= "", activity: String, blocking: Boolean ?= false)
GET           /projects/:project/activities/:activity/config                    controllers.workspace.ActivityApi.getActivityConfig(project: String, task = "", activity: String)
POST          /projects/:project/activities/:activity/config                    controllers.workspace.ActivityApi.postActivityConfig(project: String, task = "", activity: String)
GET           /projects/:project/activities/:activity/status                    controllers.workspace.ActivityApi.getActivityStatus(project: String, task = "", activity: String)
GET           /projects/:project/activities/:activity/value                     controllers.workspace.ActivityApi.getActivityValue(project: String, task = "", activity: String)

# Task Activities
GET           /projects/:project/tasks/:task/activities                         controllers.workspace.ActivityApi.getTaskActivities(project: String, task: String)
POST          /projects/:project/tasks/:task/activities/:activity/start         controllers.workspace.ActivityApi.startActivity(project: String, task: String, activity: String, blocking: Boolean = false)
POST          /projects/:project/tasks/:task/activities/:activity/startBlocking controllers.workspace.ActivityApi.startActivity(project: String, task: String, activity: String, blocking: Boolean = true)
POST          /projects/:project/tasks/:task/activities/:activity/cancel        controllers.workspace.ActivityApi.cancelActivity(project: String, task: String, activity: String)
POST          /projects/:project/tasks/:task/activities/:activity/restart       controllers.workspace.ActivityApi.restartActivity(project: String, task: String, activity: String, blocking: Boolean ?= false)
GET           /projects/:project/tasks/:task/activities/:activity/config        controllers.workspace.ActivityApi.getActivityConfig(project: String, task: String, activity: String)
POST          /projects/:project/tasks/:task/activities/:activity/config        controllers.workspace.ActivityApi.postActivityConfig(project: String, task: String, activity: String)
GET           /projects/:project/tasks/:task/activities/:activity/status        controllers.workspace.ActivityApi.getActivityStatus(project: String, task: String, activity: String)
GET           /projects/:project/tasks/:task/activities/:activity/value         controllers.workspace.ActivityApi.getActivityValue(project: String, task: String, activity: String)

# General Activities API
POST          /activities/start                                                 controllers.workspace.ActivityApi.startActivity(project: String, task: String, activity: String, blocking: Boolean = false)
POST          /activities/startBlocking                                         controllers.workspace.ActivityApi.startActivity(project: String, task: String, activity: String, blocking: Boolean = true)
POST          /activities/cancel                                                controllers.workspace.ActivityApi.cancelActivity(project: String, task: String, activity: String)
POST          /activities/restart                                               controllers.workspace.ActivityApi.restartActivity(project: String, task: String, activity: String, blocking: Boolean ?= false)
GET           /activities/config                                                controllers.workspace.ActivityApi.getActivityConfig(project: String, task: String, activity: String)
POST          /activities/config                                                controllers.workspace.ActivityApi.postActivityConfig(project: String, task: String, activity: String)
GET           /activities/status                                                controllers.workspace.ActivityApi.getActivityStatus(project: String, task: String, activity: String)
GET           /activities/recent                                                controllers.workspace.ActivityApi.recentActivities(maxCount: Int ?= 10)
GET           /activities/log                                                   controllers.workspace.ActivityApi.activityLog()
GET           /activities/updates                                               controllers.workspace.ActivityApi.getActivityStatusUpdates(project: String ?= "", task: String ?= "", activity: String ?= "", timestamp: Long ?= 0L)
GET           /activities/updatesWebSocket                                      controllers.workspace.ActivityApi.activityStatusUpdatesWebSocket(project: String ?= "", task: String ?= "", activity: String ?= "")

############################################################################################################################################
# Assets
############################################################################################################################################

GET           /assets/*file                                                     controllers.workspace.Assets.at(path="/public/lib/silk-workbench-workspace", file)
