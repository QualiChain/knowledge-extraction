package org.silkframework.workbench

import org.silkframework.runtime.serialization.{ReadContext, SerializationFormat, WriteContext}

/**
  * CSV serialization format.
  *
  * @tparam T The value type that can be serialized by an implementing class.
  */
trait CsvFormat[T] extends SerializationFormat[T, String] {
  /**
    * The types that are generated by this task.
    */
  def typeNames: Set[String] = Set.empty

  /**
    * The MIME types that can be formatted.
    */
  def mimeTypes: Set[String] = Set("text/csv", "application/csv")

  /**
    * Formats a JSON value as string.
    */
  def toString(value: T, mimeType: String)(implicit writeContext: WriteContext[String]): String = {
    write(value)
  }

  /**
    * Reads a value from a JSON string.
    */
  def fromString(value: String, mimeType: String)(implicit readContext: ReadContext): T = {
    read(parse(value, mimeType))
  }

  /**
    * Read Serialization format from string
    */
  override def parse(value: String, mimeType: String): String = value

  override def toString(values: Iterable[T], mimeType: String, containerName: Option[String])(implicit writeContext: WriteContext[String]): String = {
    throw new UnsupportedOperationException("Iterables cannot be serialized to CSV")
  }
}
