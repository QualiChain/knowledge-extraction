package org.silkframework.config

import java.time.Instant

import org.silkframework.runtime.serialization.{ReadContext, WriteContext, XmlFormat}

import scala.xml._

/**
  * Holds meta data about a task.
  */
case class MetaData(label: String, description: Option[String] = None, modified: Option[Instant] = None) {

  /**
    * Returns the label if defined or a default string if the label is empty. Truncates the label to maxLength characters.
    *
    * @param defaultLabel A default label that should be returned if the label is empty
    * @param maxLength the max length in characters
    */
  def formattedLabel(defaultLabel: String, maxLength: Int = MetaData.DEFAULT_LABEL_MAX_LENGTH): String = {
    assert(maxLength > 5, "maxLength for task label must be at least 5 chars long")
    val trimedLabel = if(label.trim != "") {
      label.trim
    } else {
      defaultLabel
    }
    if(trimedLabel.length > maxLength) {
      val sideLength = (maxLength - 2) / 2
      trimedLabel.take(sideLength) + s" ... " + trimedLabel.takeRight(sideLength)
    } else {
      trimedLabel
    }
  }

}

object MetaData {

  val DEFAULT_LABEL_MAX_LENGTH = 50

  def empty: MetaData = MetaData("", None)

  // Regular expressions to detect eccenca Corporate Memory identifiers.
  private val DatasetRegex = "datasetresource_([\\d]+)_(.*)".r
  private val GraphDatasetRegex = "datasetresource_([\\d]+)_newResource_eccencaDataPlatform".r
  private val TransformRegex = "transform_datasetresource_([\\d]+)_(.*)".r
  private val LinkingRegex = "linking_transform_datasetresource_([\\d]+)_(.*)_transform_datasetresource_([\\d]+)_(.*)".r

  /**
    * Generates a nice label from an identifier.
    */
  def labelFromId(id: String): String = {
    cleanEccencaCorporateMemoryIdentifier(id).getOrElse(splitId(id))
  }

  /**
    * Splits an identifier into words separated by spaces.
    */
  private def splitId(id: String): String = {
    val sb = new StringBuilder(id.head.toString)
    for(i <- 1 until id.length) {
      val c = id.charAt(i)
      val prev = id.charAt(i - 1)
      if(c == '_') {
        sb += ' '
      } else if(c.isUpper && !prev.isUpper && prev != '_') {
        sb += ' '
        sb += c
      } else {
        sb += c
      }
    }
    sb.toString
  }

  /**
    * Clean up identifiers that are generated by eccenca Corporate Memory.
    * Should be removed as soon as it has been fixed to generate nice identifiers.
    */
  private def cleanEccencaCorporateMemoryIdentifier(id: String): Option[String] = {
    id match {
      case GraphDatasetRegex(number) =>
        Some(s"Graph $number")
      case DatasetRegex(number, name) =>
        Some(s"Dataset ${splitId(name)} ($number)")
      case TransformRegex(number, name) =>
        Some(s"Transform ${splitId(name)} ($number)")
      case LinkingRegex(number1, name1, number2, name2) =>
        Some(s"Linking '${splitId(name1)}' - '${splitId(name2)}'")
      case _ =>
        None
    }
  }

  /**
    * XML serialization format.
    */
  implicit object MetaDataXmlFormat extends XmlFormat[MetaData] {
    /**
      * Deserialize a value from XML.
      */
    def read(node: Node)(implicit readContext: ReadContext): MetaData = {
      MetaData(
        label = (node \ "Label").text,
        description = Some((node \ "Description").text).filter(_.nonEmpty),
        modified = (node \ "Modified").headOption.map(node => Instant.parse(node.text))
      )
    }

    /**
      * Serialize a value to XML.
      */
    def write(data: MetaData)(implicit writeContext: WriteContext[Node]): Node = {
      <MetaData>
        <Label>{data.label}</Label>
        <Description>{data.description.getOrElse("")}</Description>
        { data.modified.map(instant => <Modified>{instant.toString}</Modified>).toSeq }
      </MetaData>
    }
  }

}