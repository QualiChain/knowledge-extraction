file://cities15000.zip <- http://download.geonames.org/export/dump/cities15000.zip ! download

    
file://cities15000.txt <- file://cities15000.zip
    unzip cities15000.zip
    
    
sqlite://world-cities.sqlite/city <- file://cities15000.txt ! python
    import sqlite3
    import csv
    INFILE = 'cities15000.txt'
    DBFILE = 'world-cities.sqlite'

    with open(INFILE) as incsv:
        reader = csv.reader(incsv, delimiter="\t")        
        conn = sqlite3.connect(DBFILE)
        c = conn.cursor()
        c.execute('''CREATE TABLE city
                 (name, country_code, subcountry_code, geonameid)''')
        for geonameid, name, asciiname, alternatenames, latitude, longitude, \
          featureclass, featurecode, countrycode, cc2, admin1code, admin2code, \
          admin3code, admin4code, population, elevation, dem, timezone, \
          modificationdate in reader:
            name = name.decode('utf8')
            country_code = countrycode.decode('utf8')
            subcountry_code = admin1code.decode('utf8')
            geonameid = geonameid.decode('utf8')
            c.execute("INSERT INTO city VALUES (?, ?, ?, ?)", (name, country_code, subcountry_code, geonameid))
        conn.commit()
        conn.close()

            
file://admin1CodesASCII.txt <- http://download.geonames.org/export/dump/admin1CodesASCII.txt ! download


sqlite://world-cities.sqlite/admin1 <- file://admin1CodesASCII.txt ! python
    import sqlite3
    import csv
    INFILE = 'admin1CodesASCII.txt'
    DBFILE = 'world-cities.sqlite'
    
    with open(INFILE) as incsv:
        reader = csv.reader(incsv, delimiter="\t")        
        conn = sqlite3.connect(DBFILE)
        c = conn.cursor()
        c.execute('''CREATE TABLE admin1
                 (country_code, subcountry_code, name, geonameid)''')
        for code, name, asciiname, geonameid in reader:
            code = code.decode('utf8')
            country_code, subcountry_code = code.split(u'.', 2)
            name = name.decode('utf8')
            geonameid = geonameid.decode('utf8')
            c.execute("INSERT INTO admin1 VALUES (?, ?, ?, ?)", (country_code, subcountry_code, name, geonameid))
        conn.commit()
        conn.close()

        
file://countryInfo.txt <- http://download.geonames.org/export/dump/countryInfo.txt ! download


sqlite://world-cities.sqlite/country <- file://countryInfo.txt ! python
    import sqlite3
    import csv
    INFILE = 'countryInfo.txt'
    DBFILE = 'world-cities.sqlite'
    
    def skip_comment(instream):
        for line in instream:
            if line[0] != "#":
                yield line
        
    with open(INFILE) as incsv:
        reader = csv.reader(skip_comment(incsv), delimiter="\t")
        conn = sqlite3.connect(DBFILE)
        c = conn.cursor()
        c.execute('''CREATE TABLE country
                 (country_code, name, geonameid)''')
        for ISO, ISO3, ISONumeric, fips, Country, Capital, Area, \
          Population, Continent, tld, CurrencyCode, CurrencyName, \
          Phone, PostalCodeFormat, PostalCodeRegex, Languages, \
          geonameid, neighbours, EquivalentFipsCode in reader:
            country_code = ISO.decode('utf8')
            name = Country.decode('utf8')
            geonameid = geonameid.decode('utf8')
            c.execute("INSERT INTO country VALUES (?, ?, ?)", (country_code, name, geonameid))
        conn.commit()
        conn.close()

        
file://../data/world-cities.csv <- sqlite://world-cities.sqlite/country, sqlite://world-cities.sqlite/admin1, sqlite://world-cities.sqlite/city ! python
    import sqlite3
    import csv
    from os.path import exists, join
    from os import mkdir
    DATADIR = join('..', 'data')
    OUTFILE = join(DATADIR, 'world-cities.csv')
    HEADERS = ['name', 'country', 'subcountry', 'geonameid']
    DBFILE = 'world-cities.sqlite'
    
    if not exists(DATADIR):
        mkdir(DATADIR)
    with open(OUTFILE, 'w') as outcsv:
        writer = csv.writer(outcsv, lineterminator="\n")
        writer.writerow(HEADERS)
        conn = sqlite3.connect(DBFILE)
        c = conn.cursor()
        sql = '''SELECT 
                    city.name, 
                    country.name, 
                    IFNULL(admin1.name, "N/A"),
                    city.geonameid
                 FROM city 
                    LEFT OUTER JOIN country ON city.country_code = country.country_code
                    LEFT OUTER JOIN admin1 ON city.subcountry_code = admin1.subcountry_code AND city.country_code = admin1.country_code
                 '''
        for name, country, subcountry, geonameid in c.execute(sql):
            row = (name.encode('utf8'), country.encode('utf8'),
                   subcountry.encode('utf8'), geonameid.encode('utf8'))
            writer.writerow(row)

file://ambiguities.csv <- sqlite://world-cities.sqlite/country, sqlite://world-cities.sqlite/admin1, sqlite://world-cities.sqlite/city ! python
    # Export the list of ambiguous cities, as a tip for the end user
    import sqlite3
    import csv
    OUTFILE = 'ambiguities.csv'
    HEADERS = ['name', 'country', 'subcountry', 'nb']
    DBFILE = 'world-cities.sqlite'
    
    with open(OUTFILE, 'wb') as outcsv:
        writer = csv.writer(outcsv, lineterminator="\n")
        writer.writerow(HEADERS)
        conn = sqlite3.connect(DBFILE)
        c = conn.cursor()
        sql = '''SELECT 
                    city.name, 
                    country.name, 
                    IFNULL(admin1.name, "N/A"),
                    COUNT(*) as nb
                 FROM city 
                    LEFT OUTER JOIN country ON city.country_code = country.country_code
                    LEFT OUTER JOIN admin1 ON city.subcountry_code = admin1.subcountry_code AND city.country_code = admin1.country_code
                 GROUP BY 
                    city.name, 
                    country.name, 
                    IFNULL(admin1.name, "N/A")
                 HAVING COUNT(*) > 1
                 '''
        for name, country, subcountry, nb in c.execute(sql):
            row = (name.encode('utf8'), country.encode('utf8'), subcountry.encode('utf8'), nb)
            writer.writerow(row)
