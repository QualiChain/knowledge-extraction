Phase:	extractQualification
Input: Token SpaceToken Enumerator CertificateDegree saroSkill
Options: control = appelt


//The candidates should have:
//a)	BSc in Computer Science   

Rule:	qualification1
	(
		{Token.root == "candidate"}{SpaceToken}({Token.root == "should"}|{Token.root == "must"}){SpaceToken}
		{Token.root == "have"}({Token.kind == punctuation})?({SpaceToken})?
	)
	({Enumerator}{SpaceToken})?
	({CertificateDegree}): degree
	({SpaceToken}{Token.root == "in"}{SpaceToken})
	({saroSkill.classURI == "http://w3id.org/saro/Topic" ,  saroSkill notWithin Enumerator}): label
  
-->

{
	gate.AnnotationSet skillTopicAnn = (gate.AnnotationSet)bindings.get("label"); 
	gate.Annotation ann = skillTopicAnn.iterator().next();
    gate.AnnotationSet degree = (gate.AnnotationSet)bindings.get("degree"); 
	gate.FeatureMap features = Factory.newFeatureMap();
	features.put("rule", "qualification1");
	features.put("kind", "qualificationInSkillTopic");	
	features.put("string", ann.getFeatures().get("string"));
	gate.Annotation certificateDegree = (gate.Annotation)degree.iterator().next();
	features.put("certificateDegree", certificateDegree);	

				

	outputAS.add(skillTopicAnn.firstNode(), skillTopicAnn.lastNode(), "QualificationTemp", features);
}



//Degree: BSc in Computer Science   

Rule:	qualification2
	({SpaceToken.kind == control}{Token.root == "degree"}({Token.kind == punctuation})?({SpaceToken})?)
	({CertificateDegree}): degree
	({SpaceToken}{Token.root == "in"}{SpaceToken})
	({saroSkill.classURI == "http://w3id.org/saro/Topic" , saroSkill notWithin Enumerator}): label
  
-->

{
	gate.AnnotationSet skillTopicAnn = (gate.AnnotationSet)bindings.get("label"); 
	gate.Annotation ann = skillTopicAnn.iterator().next();
    gate.AnnotationSet degree = (gate.AnnotationSet)bindings.get("degree"); 
	gate.FeatureMap features = Factory.newFeatureMap();
	features.put("rule", "qualification1");
	features.put("kind", "qualificationInSkillTopic");	

	features.put("string", ann.getFeatures().get("string"));
	gate.Annotation certificateDegree = (gate.Annotation)degree.iterator().next();
	features.put("certificateDegree", certificateDegree);	

				

	outputAS.add(skillTopicAnn.firstNode(), skillTopicAnn.lastNode(), "QualificationTemp", features);
}